package com.gxnu.service.imp;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.gxnu.dao.PatientDAO;
import com.gxnu.entity.Patient;
import com.gxnu.service.IPatientService;
/**
 * 权限操作对应的业务类
 * @author johny
 * 业务层须合理调用持久层方法，完成具体业务功能
 * 处理异常
 */
public class PatientService implements IPatientService{
	@Override
	public void add(Patient patient) {
		//创建持久层类对象
		PatientDAO patientDAO = new PatientDAO();
		try {
			patientDAO.add(patient);
		} catch (ClassNotFoundException | SQLException e) {
			//处理异常，打印异常的轨迹
			e.printStackTrace();
		}
	}

	@Override
	public void remove(int id) {
		//创建持久层类对象
		PatientDAO patientDAO = new PatientDAO();
		Patient patient = new Patient(); //id=0
		patient.setId(id);
		try {
			patientDAO.delete(patient);
		} catch (ClassNotFoundException | SQLException e) {
			//处理异常，打印异常的轨迹
			e.printStackTrace();
		}
	}

	@Override
	public void update(Patient patient) {
		//创建持久层类对象
		PatientDAO patientDAO = new PatientDAO();
		try {
			patientDAO.update(patient);
		} catch (ClassNotFoundException | SQLException e) {
			//处理异常，打印异常的轨迹
			e.printStackTrace();
		}
	}

	@Override
	public Patient find(int id) {
		//创建持久层类对象
		PatientDAO patientDAO = new PatientDAO();
		Patient patient = new Patient();
		try {
			patient = patientDAO.findByPrimaryKey(id);
		} catch (ClassNotFoundException | SQLException e) {
			//处理异常，打印异常的轨迹
			e.printStackTrace();
		}
		return patient;
	}

	@Override
	public List<Patient> find() {
		//创建持久层类对象
		PatientDAO patientDAO = new PatientDAO();
		List<Patient> patients = new ArrayList<Patient>();
		try {
			patients = patientDAO.findAll();
		} catch (ClassNotFoundException | SQLException e) {
			//处理异常，打印异常的轨迹
			e.printStackTrace();
		}
		return patients;
	}

	@Override
	public List<Patient> findByRole(int roleid) {
		//创建持久层类对象
		PatientDAO patientDAO = new PatientDAO();
		List<Patient> patients = new ArrayList<Patient>();
		try {
			patients = patientDAO.findAll();
		} catch (ClassNotFoundException | SQLException e) {
			//处理异常，打印异常的轨迹
			e.printStackTrace();
		}
		return patients;
	}
}