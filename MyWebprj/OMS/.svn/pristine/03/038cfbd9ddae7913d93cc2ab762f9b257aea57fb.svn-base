package com.gxnu.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.gxnu.entity.Post;
import com.gxnu.entity.Post;


/**
 * 职位表的CURD操作
 * @author 胖子不露小酒窝
 *
 */
public class PostDAO extends C3P0BaseDAO {
	
	//添加职位表
	/**
	 * 添加职位表
	 * @param postt 表示待加的职位表信息{id=1，name=访客}
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public void add(Post post) throws ClassNotFoundException, SQLException {
		//1.加载驱动  2.连接rbac数据库
		Connection conn=super.getConnection();
		
		//3.基于数据库连接对象java.sql.Connection,创建数据库操作对象java.sql.PreparedStatement,需绑定一个sql语句
		//此处的？表示“占位符”，下标从1开始递增
		PreparedStatement pstmt=
				conn.prepareStatement("insert into postt(post,price) values(?,?)");
		
		//设置点位符的值，注意数据类型的选择		
		pstmt.setString(1,post.getPost());
		pstmt.setInt(2,post.getPrice());				 
		//执行SQL语句，结果会同步到MySQL表中
		pstmt.executeUpdate();
		
		//关闭数据库连接
		super.closeConnection(conn);
		
	}
	
	
	//修改职位表
	/**
	 * 修改职位表
	 * @param postt 表示待加的职位表信息{id=1，name=访客}
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public void update(Post post) throws ClassNotFoundException, SQLException {
		//1.加载驱动  2.连接rbac数据库
		Connection conn=super.getConnection();
		
		//3.基于数据库连接对象java.sql.Connection,创建数据库操作对象java.sql.PreparedStatement,需绑定一个sql语句
		//此处的？表示“占位符”，下标从1开始递增
		PreparedStatement pstmt=
				conn.prepareStatement("update postt set post=?,price=? where id=?");
		
		//设置点位符的值，注意数据类型的选择
		pstmt.setString(1,post.getPost());
		pstmt.setInt(2,post.getPrice());
		pstmt.setInt(3,post.getId());	
		//pstmt.setInt(5,postt.getRole().getId());  //导航链，可以获取关联对象中的详细信息		
		//执行SQL语句，结果会同步到MySQL表中
		pstmt.executeUpdate();
		
		//关闭数据库连接
		super.closeConnection(conn);
		
	}
	
	//删除职位表
	/**
	 * 删除职位表
	 * @param postt 表示待加的职位表信息{id=1，name=访客}
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public void delete(Post postt) throws ClassNotFoundException, SQLException {
		//1.加载驱动  2.连接rbac数据库
		Connection conn=super.getConnection();
		
		//3.基于数据库连接对象java.sql.Connection,创建数据库操作对象java.sql.PreparedStatement,需绑定一个sql语句
		//此处的？表示“占位符”，下标从1开始递增
		PreparedStatement pstmt=
				conn.prepareStatement("delete from postt where id=?");
		
		//设置点位符的值，注意数据类型的选择
		pstmt.setInt(1,postt.getId());
		
		//执行SQL语句，结果会同步到MySQL表中
		pstmt.executeUpdate();
		
		//关闭数据库连接
		super.closeConnection(conn);
		
	}
	
	//查询职位表
	/**
	 * 查询职位表，查所有
	 * @return 把结果集中的所有记录，包装成postt对象，再存放到数组中
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public List<Post> findAll() throws ClassNotFoundException, SQLException {
		//定义数组
		List<Post> postts = new ArrayList<Post>();   //默认每个元素均为null
		int i = 0;		
		Connection conn = super.getConnection();     			 //1、加载驱动 2、连接rbacpro数据库
		PreparedStatement pstmt = 								 //3、基于数据库连接对象 java.sql.Connection,创建数据库操作对象java.sql.PreparedStatement，须绑定一个SQL语句
				conn.prepareStatement("select * from postt"); 	 //此处的？表示“占位符”，下标从1开始递增，须在后续设置其值													
		ResultSet rs = pstmt.executeQuery();	    	//4、基于数据操作对象java.sql.PreparedStatement，创建数据库结果集对象java.sql.ResultSet
		
		//通过循环遍历结果集
		while(rs.next()) {
			//每循环一次，获取指针定位的某条记录上的数据
			/*
			int id = rs.getInt("id");  //id为字段名称 
			String name = rs.getString("name"); //name为字段名称
			Postt postt = new Postt(id, name); //把数据包装成Postt实体对象
			postts[i] = postt;
			i++;
			*/
			
			/*Role role=new Role();  //{id=0,name=null;}
			RoleDAO roleDAO=new RoleDAO();
			role=roleDAO.findByPrimaryKey(rs.getInt("role");
			*/
			//Role role=new RoleDAO().findByPrimaryKey(rs.getInt("role"));
			postts.add( new Post(rs.getInt("id"), rs.getString("post"),rs.getInt("price")));					   					   			  							
		}
		super.closeConnection(conn);
		return postts;	//返回数组
	}
	
	/**
	 * 查询职位表，查单个
	 * @return 把结果集中的所有记录，包装成postt对象，再存放到数组中
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public Post findByPrimaryKey(int id) throws ClassNotFoundException, SQLException {
		Post post = new Post();
		//1、加载驱动 2、连接rbacpro数据库
		Connection conn = super.getConnection();
		
		//3、基于数据库连接对象 java.sql.Connection,创建数据库操作对象java.sql.PreparedStatement，须绑定一个SQL语句
		//此处的？表示“占位符”，下标从1开始递增，须在后续设置其值
		PreparedStatement pstmt = conn.prepareStatement("select * from postt where id=?");
		pstmt.setInt(1, id);
		
		//4、基于数据操作对象java.sql.PreparedStatement，创建数据库结果集对象java.sql.ResultSet
		ResultSet rs = pstmt.executeQuery();
		
		//因为结果集中只有一条记录，无需循环遍历结果集，只需要让指针移动一次即可
		if(rs.next()) {
			
			post=new Post(rs.getInt("id"), rs.getString("post"),rs.getInt("price"));
					  
			
			 //把数据包装成Postt实体对象
		}
		//返回数组
	return post;
	}
	
	//查询表中所有记录总条数
	private int findTotal() throws ClassNotFoundException, SQLException {
		int total =0;
		//1、加载驱动 2、连接rbacpro数据库
		Connection conn = super.getConnection();
		//3、基于数据库连接对象 java.sql.Connection,创建数据库操作对象java.sql.PreparedStatement，须绑定一个SQL语句
		//此处的？表示“占位符”，下标从1开始递增，须在后续设置其值
		PreparedStatement pstmt = conn.prepareStatement("select  count(*) from postt");
		//4、基于数据操作对象java.sql.PreparedStatement，创建数据库结果集对象java.sql.ResultSet
		ResultSet rs = pstmt.executeQuery();
		
		//通过循环遍历结果集
		if(rs.next()) {
			//每循环一次，获取指针定位的某条记录上的数据
			total = rs.getInt(1);  // 此处1为字段序号，也可以使用 count(*)为字段名称 
		}
		return total;
	}
}
