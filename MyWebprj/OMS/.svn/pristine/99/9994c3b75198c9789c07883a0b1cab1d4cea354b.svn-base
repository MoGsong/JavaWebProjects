package com.dw.webSocket;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import com.alibaba.fastjson.JSONObject;
import com.dw.pojo.Msg;


@ServerEndpoint(value = "/chatroom")
public class WSServPoint {
	
	static Map<Session,String>us=new HashMap<Session,String>();
	Map<String,String>map;
	 private Msg ms;
	 @OnOpen
	    public void onOpen(Session session) throws UnsupportedEncodingException {
	      System.out.println("连接建立成功！！！");
	       String msg=session.getQueryString();
	        msg=URLDecoder.decode(msg,"utf-8");
	          map=new HashMap<String, String>();
	          if(msg.contains("&")){
	        	  String[] sts=msg.split("\\&");
	        	  for(String str:sts){
	        		String[]strs=str.split("=");
	        		 map.put(strs[0], strs[1]);
	        	  }
	          }else{
	        	 String[] strs= msg.split("=");
	        	 map.put(strs[0], strs[1]);
	          }
	         
	          System.out.println("map:"+map);
	          us.put(session,map.get("NAME"));
	          ms=new Msg();
	          ms.setType("s");
	          ms.setMsgSender("system");
	          ms.setMsgDate(new Date());
	          ms.setUserList(new ArrayList<String>(us.values()));
	          ms.setMsgInfo(map.get("NAME")+"已上线！！");
	         String jsonStr=JSONObject.toJSONString(ms);
	        
	        bordcast(us.keySet(),jsonStr);
	    }


	    @OnClose
	    public void onClose(Session session) {
	    	
	    	  us.remove(session);
	    	  ms=new Msg();
	    	  ms.setType("s");
	          ms.setMsgSender("system");
	          ms.setMsgDate(new Date());
	          ms.setUserList(new ArrayList<String>(us.values()));
	          ms.setMsgInfo(map.get("NAME")+"已下线！！");
	          String jsonStr=JSONObject.toJSONString(ms);
		      
		        bordcast(us.keySet(),jsonStr);
	    	 System.out.println("连接已关闭！！！");
	    }


	    @OnMessage
	    public void onMessage(String message,Session session) throws IOException {
	    	  Msg ms=new Msg();
	    	   ms.setType("p");
	    	   ms.setMsgSender(map.get("NAME"));
	    	   ms.setMsgDate(new Date());
	    	 
	    	  if(message.startsWith("@")&&message.contains(":")){
	    		  String reivName=message.substring(message.indexOf("@")+1, message.indexOf(":"));
	    		  if(us.containsValue(reivName)){
	    			  for(Entry<Session, String> e: us.entrySet()){
	    				  if(reivName.equals(e.getValue())){
	    					  Session reivSession=e.getKey();
	    					  message=message.substring(message.indexOf(":")+1);
	    					  ms.setMsgInfo("私信->"+reivName+""+message);
	    					  ms.setMsgReceiver(reivName);
	    					  String jsonstr= JSONObject.toJSONString(ms);
	    					   Set<Session>hashSet=new HashSet<Session>();
	    					    hashSet.add(reivSession);
	    					    hashSet.add(session);
	    			    	  bordcast(hashSet, jsonstr);
	    					    break;
	    				  }
	    			  }
	    			  
	    		  }else{
	    			  ms.setMsgInfo(message);
			    	  String jsonstr= JSONObject.toJSONString(ms);
			    	  bordcast(us.keySet(), jsonstr);
	    		  }
	    	  }else{
	    		    ms.setMsgInfo(message);
		    	  String jsonstr= JSONObject.toJSONString(ms);
		    	  bordcast(us.keySet(), jsonstr);
	    		  
	    	  }
	    	
	    }




	    @OnError
	    public void onError(Throwable t) throws Throwable {
	    	 System.out.println("系统异常！！！");
	    }
	    
	    public void bordcast(Set<Session>set,String message){
	    	 for(Session s:set){
	    		 try {
					s.getBasicRemote().sendText(message);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    	 }
	    }
}
