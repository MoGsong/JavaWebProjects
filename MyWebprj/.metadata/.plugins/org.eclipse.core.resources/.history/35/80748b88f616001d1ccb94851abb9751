package com.gxnu.action.manage;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.gxnu.entity.Authorization;
import com.gxnu.entity.Menu;
import com.gxnu.entity.Role;
import com.gxnu.service.IAuthorizationService;
import com.gxnu.service.imp.AuthorizationService;

/**
 * Servlet implementation class OperatorAction
 */
@WebServlet("/authorization")
public class AuthorizationAction extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public AuthorizationAction() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doPost(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String op = request.getParameter("OP");
		
		if(op!=null&&"find".equals(op)){
		//查找显示对应角色的权限	
		String roleid = request.getParameter("roleid");
		System.out.println(roleid);
		IAuthorizationService ias = new AuthorizationService();
		List<Authorization> authorizations = ias.findByRole(Integer.parseInt(roleid));
		HttpSession session = request.getSession();
		session.setAttribute(Data.AUTHORIZATION, authorizations);
		System.out.print(authorizations.toString());
		request.getRequestDispatcher("CIMS/tab/step2.jsp").forward(request, response);
		
		}else if(op!=null&&"update".equals(op)) {
			
			String strroleid = request.getParameter("roleid");
			System.out.println(strroleid);
			int roleid = 0;
			if(strroleid!=null) {
				roleid = Integer.parseInt(strroleid);
			}
			IAuthorizationService ias = new AuthorizationService();
			List<Authorization> authorizations = ias.findByRole(Integer.parseInt(strroleid));
			System.out.print(authorizations.toString());
			String[] strmenus = request.getParameterValues("menus");
			//checkbox只有两种情况有何没有，如果传递的menus参数里权限表没有则添加，如果传递的menus参数没有权限表有则删除。简化步骤为，先删除权限表内所有，再添加传递参数的
			//删除权限表
			for (Authorization au : authorizations) {
				if(au.getRole().getId()==roleid&&au.getMenu().getId()!=15) {
						ias.remove(au.getId());
						System.out.println("已删除"+au.toString());
				}
			}
			//添加权限表
			for (String strmenu : strmenus) {
				System.out.println(strmenu);
				Role role = new Role();
				role.setId(roleid);
				Menu menu = new Menu();
				menu.setId(Integer.parseInt(strmenu));
				Authorization au = new Authorization(role,menu);
				ias.add(au);
				System.out.println("已添加"+au.toString());
			}
			response.sendRedirect("Data.URL/main.html");
		}	
	
	}

}
