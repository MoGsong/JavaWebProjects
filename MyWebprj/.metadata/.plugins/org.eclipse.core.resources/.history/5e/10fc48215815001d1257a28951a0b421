package com.gxnu.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.gxnu.entity.Operator;
import com.gxnu.entity.Role;
import com.gxnu.entity.Operator;
/**
 * 操作员表的CURD操作
 * @author johny
 * 持久层类
 */
public class OperatorDAO extends C3P0BaseDAO {
	/**
	 * 添加操作员
	 * @param operator 表示待添加的操作员信息，形如：{id=1,name=访客}
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public void add(Operator operator) throws ClassNotFoundException, SQLException {
		//1、加载驱动 2、连接rbacpro数据库
		Connection conn = super.getConnection();
		//3、基于数据库连接对象 java.sql.Connection,创建数据库操作对象java.sql.PreparedStatement，须绑定一个SQL语句
		//此处的？表示“占位符”，下标从1开始递增，须在后续设置其值
		PreparedStatement pstmt = 
				conn.prepareStatement("insert into operator(username,password,tel,email,pic,operator) values(?,?,?,?,?,?)");
		//设置点位符的值,注意数据类型的选择
		pstmt.setString(1,operator.getUsername());
		pstmt.setString(2,operator.getPassword());
		pstmt.setString(3,operator.getTel());
		pstmt.setString(4,operator.getEmail());
		pstmt.setString(5,operator.getPic());
		pstmt.setInt(6,operator.getRole().getId());  //导航链 ，可以获取关联对象中的详细信息
		//执行SQL语句,结果会同步到mysql表中
		pstmt.executeUpdate();
		//关闭数据库连接
		super.closeConnection(conn);
	}
	/**
	 * 修改操作员
	 * @param operator 表示修改后的操作员信息，形如：{id=3,name=超管}
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public void merge(Operator operator) throws ClassNotFoundException, SQLException {
		//1、加载驱动 2、连接rbacpro数据库
		Connection conn = super.getConnection();
		//3、基于数据库连接对象 java.sql.Connection,创建数据库操作对象java.sql.PreparedStatement，须绑定一个SQL语句
		//此处的？表示“占位符”，下标从1开始递增，须在后续设置其值
		PreparedStatement pstmt = 
				conn.prepareStatement("update operator set password=?,tel=?,email=?,pic=?,operator=? where id=?");
		//设置点位符的值,注意数据类型的选择
		pstmt.setString(1,operator.getPassword());
		pstmt.setString(2,operator.getTel());
		pstmt.setString(3,operator.getEmail());
		pstmt.setString(4,operator.getPic());
		pstmt.setInt(5,operator.getRole().getId());//导航链  ，可以获取关联对象中的详细信息
		pstmt.setInt(6, operator.getId());
		//执行SQL语句,结果会同步到mysql表中
		pstmt.executeUpdate();
		//关闭数据库连接
		super.closeConnection(conn);
	}
	
	/**
	 * 删除操作员
	 * @param operator 表示删除的操作员信息，形如：{id=3,name=null}
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public void delete(Operator operator) throws ClassNotFoundException, SQLException {
		//1、加载驱动 2、连接rbacpro数据库
		Connection conn = super.getConnection();
		//3、基于数据库连接对象 java.sql.Connection,创建数据库操作对象java.sql.PreparedStatement，须绑定一个SQL语句
		//此处的？表示“占位符”，下标从1开始递增，须在后续设置其值
		PreparedStatement pstmt = 
				conn.prepareStatement("delete from operator where id=?");
		//设置点位符的值,注意数据类型的选择
		pstmt.setInt(1, operator.getId());
		//执行SQL语句,结果会同步到mysql表中
		pstmt.executeUpdate();
		//关闭数据库连接
		super.closeConnection(conn);
	}
	//查询操作员
	
	/**
	 * 查询角色，查所有
	 * @return 把结果集中的所有记录，包装成operator对象，再存放到数组中
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public List<Operator> findAll() throws ClassNotFoundException, SQLException {
		//定义数组
		List<Operator> operators = new ArrayList<Operator>(); //默认每个元素均为null
		int i = 0;
		//1、加载驱动 2、连接rbacpro数据库
		Connection conn = super.getConnection();
		//3、基于数据库连接对象 java.sql.Connection,创建数据库操作对象java.sql.PreparedStatement，须绑定一个SQL语句
		//此处的？表示“占位符”，下标从1开始递增，须在后续设置其值
		PreparedStatement pstmt = conn.prepareStatement("select * from operator");
		//4、基于数据操作对象java.sql.PreparedStatement，创建数据库结果集对象java.sql.ResultSet
		ResultSet rs = pstmt.executeQuery();
		
		//通过循环遍历结果集
		while(rs.next()) {
			//每循环一次，获取指针定位的某条记录上的数据

			//Role role = new RoleDAO().findByPrimaryKey(rs.getInt("role"));
			operators.add(new Operator(rs.getInt("id"), rs.getString("username"), rs.getString("password"),rs.getString("tel"),rs.getString("email"), 
					rs.getString("pic"),new RoleDAO().findByPrimaryKey(rs.getInt("role"))));
		}
		//返回数组
		return operators;
	}
	
	/**
	 * 查询角色，查单个
	 * @return 把结果集中的所有记录，包装成operator对象，再存放到数组中
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public Operator findByPrimaryKey(int id) throws ClassNotFoundException, SQLException {
		Operator operator = new Operator();
		//1、加载驱动 2、连接rbacpro数据库
		Connection conn = super.getConnection();
		//3、基于数据库连接对象 java.sql.Connection,创建数据库操作对象java.sql.PreparedStatement，须绑定一个SQL语句
		//此处的？表示“占位符”，下标从1开始递增，须在后续设置其值
		PreparedStatement pstmt = conn.prepareStatement("select * from operator where id=?");
		pstmt.setInt(1,id);
		//4、基于数据操作对象java.sql.PreparedStatement，创建数据库结果集对象java.sql.ResultSet
		ResultSet rs = pstmt.executeQuery();
		
		//因为结果集中只有一条记录，无需循环遍历结果集，只需要让指针移动一次即可
		if(rs.next()) {
			//每循环一次，获取指针定位的某条记录上的数据
			int operatorid = rs.getInt("id");  //id为字段名称 
			String name = rs.getString("username"); //username为字段名称
			String password = rs.getString("password"); //password为字段名称
			String tel = rs.getString("tel"); //tel为字段名称
			String email = rs.getString("email"); 
			String pic = rs.getString("pic"); //pic为字段名称
			int roleid = rs.getInt("role"); //role为字段名称,操作员表中的外键
			//根据外键上的角色编号，查找完整角色信息（角色实体类对象 ）
			RoleDAO roleDAO = new RoleDAO();
			Role role = roleDAO.findByPrimaryKey(roleid);
			
			operator = new Operator(operatorid, name,password,tel,email,pic,role); //把数据包装成Operator实体对象
		}
		//返回数组
		return operator;
	}
	

}
